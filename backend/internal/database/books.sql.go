// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: books.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (id, isbn, created_at, updated_at, title, author, num_pages, price)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, isbn, title, author, num_pages, price, created_at, updated_at, publisher, book_desc
`

type CreateBookParams struct {
	ID        uuid.UUID
	Isbn      string
	CreatedAt time.Time
	UpdatedAt time.Time
	Title     string
	Author    string
	NumPages  int32
	Price     int32
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.ID,
		arg.Isbn,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Author,
		arg.NumPages,
		arg.Price,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn,
		&i.Title,
		&i.Author,
		&i.NumPages,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Publisher,
		&i.BookDesc,
	)
	return i, err
}

const getBookByTitleAuthor = `-- name: GetBookByTitleAuthor :one

SELECT id, isbn, title, author, num_pages, price, created_at, updated_at, publisher, book_desc FROM books WHERE title=$1 AND author=$2
`

type GetBookByTitleAuthorParams struct {
	Title  string
	Author string
}

// TODO: update this so that the publisher and the book_desc are added
func (q *Queries) GetBookByTitleAuthor(ctx context.Context, arg GetBookByTitleAuthorParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookByTitleAuthor, arg.Title, arg.Author)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Isbn,
		&i.Title,
		&i.Author,
		&i.NumPages,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Publisher,
		&i.BookDesc,
	)
	return i, err
}

const similarBooksByDesc = `-- name: SimilarBooksByDesc :many
SELECT b.title, b.publisher, b.book_desc
FROM books b
INNER JOIN book_embeddings be ON b.id = be.book_id
CROSS JOIN (
    SELECT embedding
    FROM book_embeddings
    WHERE book_id = (SELECT id FROM books WHERE books.isbn = $1)
) AS target_embedding
WHERE b.id != (SELECT id FROM books WHERE isbn = $1)
ORDER BY be.embedding <=> target_embedding.embedding
LIMIT $2
`

type SimilarBooksByDescParams struct {
	Isbn  string
	Limit int32
}

type SimilarBooksByDescRow struct {
	Title     string
	Publisher sql.NullString
	BookDesc  sql.NullString
}

func (q *Queries) SimilarBooksByDesc(ctx context.Context, arg SimilarBooksByDescParams) ([]SimilarBooksByDescRow, error) {
	rows, err := q.db.QueryContext(ctx, similarBooksByDesc, arg.Isbn, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SimilarBooksByDescRow
	for rows.Next() {
		var i SimilarBooksByDescRow
		if err := rows.Scan(&i.Title, &i.Publisher, &i.BookDesc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
