// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reviews.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (id, created_at, updated_at, user_id, book_id, rating, review_text, spoiler_tag)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, user_id, book_id, rating, review_text, spoiler_tag
`

type CreateReviewParams struct {
	ID         uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
	UserID     uuid.UUID
	BookID     uuid.UUID
	Rating     int32
	ReviewText sql.NullString
	SpoilerTag sql.NullBool
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.BookID,
		arg.Rating,
		arg.ReviewText,
		arg.SpoilerTag,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.BookID,
		&i.Rating,
		&i.ReviewText,
		&i.SpoilerTag,
	)
	return i, err
}

const updateReview = `-- name: UpdateReview :one
UPDATE reviews
SET 
    rating = $1,
    review_text = $2,
    updated_at = $3
WHERE 
    user_id = $4 AND book_id = $5
returning id, created_at, updated_at, user_id, book_id, rating, review_text, spoiler_tag
`

type UpdateReviewParams struct {
	Rating     int32
	ReviewText sql.NullString
	UpdatedAt  time.Time
	UserID     uuid.UUID
	BookID     uuid.UUID
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, updateReview,
		arg.Rating,
		arg.ReviewText,
		arg.UpdatedAt,
		arg.UserID,
		arg.BookID,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.BookID,
		&i.Rating,
		&i.ReviewText,
		&i.SpoilerTag,
	)
	return i, err
}
